// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jGvug5XrUvXJigea3T3bFe
// Component: wyBUJZjEsoMM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { PlasmicHead } from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import NavDropdown from "../../NavDropdown"; // plasmic-import: JaxdPnyBZWaI/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Button from "../../Button"; // plasmic-import: dVJtEG1Aqjru/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import TechCardMasterContainer from "../../TechCardMasterContainer"; // plasmic-import: 7ViszuiV9048/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import ProjectCard from "../../ProjectCard"; // plasmic-import: TjefxjyiMt1X/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsux6V2OZl2Gq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ux6V2O_Zl2Gq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jGvug5XrUvXJigea3T3bFe/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: wyBUJZjEsoMM/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: b52FdPFz3urC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 1AfX7I2Q0Ggz/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  navDropdown?: Flex__<typeof NavDropdown>;
  lottie?: Flex__<typeof LottieWrapper>;
  embedHtml?: Flex__<typeof Embed>;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  techCardMasterContainer?: Flex__<typeof TechCardMasterContainer>;
  trustedByMarque?: Flex__<typeof SliderWrapper>;
  hypernovaUsa?: Flex__<typeof CmsQueryRepeater>;
  unisynTechnologies?: Flex__<typeof CmsQueryRepeater>;
  flowFeed?: Flex__<typeof CmsQueryRepeater>;
  scrubstr?: Flex__<typeof CmsQueryRepeater>;
  autoLingo?: Flex__<typeof CmsQueryRepeater>;
  skillShotGolf?: Flex__<typeof CmsQueryRepeater>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "trustedByMarque.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "trustedByMarque",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsux6V2OZl2Gq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={
              "From Idea to Interface - Let's Build Something Together!"
            }
            image={"/plasmic/noahmcgraw_dev/images/noahPili48Cropped1Jpg.jpg"}
            title={"Noah McGraw - Full Stack Software Engineer"}
          />

          <Reveal
            className={classNames("__wab_instance", sty.reveal__wb87F)}
            delay={3000}
            duration={1000}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xOu2Q)}>
              <div className={classNames(projectcss.all, sty.freeBox__co6Y2)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__a8YZt
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__avpl)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__dtWwl)}
                      displayHeight={"60px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"60px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/noahmcgraw_dev/images/noahPili48Cropped1Jpg.jpg",
                        fullWidth: 2590,
                        fullHeight: 2305,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pI3S
                      )}
                    >
                      {"Noah McGraw"}
                    </div>
                  </Stack__>
                </PlasmicLink__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jHgTv)}
                >
                  <NavDropdown
                    data-plasmic-name={"navDropdown"}
                    data-plasmic-override={overrides.navDropdown}
                    className={classNames("__wab_instance", sty.navDropdown)}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__fSqcn)}
                    color={"clear"}
                    link={"#get-started"}
                    shape={"rounded"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n8Thz
                      )}
                    >
                      {"TEstimonials"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__asJ8R)}
                    color={"clear"}
                    link={"#get-started"}
                    shape={"rounded"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l6LrW
                      )}
                    >
                      {"Experience"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button___3D6I6)}
                    color={"white"}
                    link={"#get-started"}
                    shape={"rounded"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fpSoE
                      )}
                    >
                      {"Start a Project"}
                    </div>
                  </Button>
                </Stack__>
              </div>
            </div>
          </Reveal>
          <div className={classNames(projectcss.all, sty.freeBox__q5AR0)}>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__pyX,
                "counter-clockwise-border-anim"
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox___7ZTxy)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__nblSm)}
                  delay={500}
                  duration={2000}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hdJkw
                    )}
                  >
                    {"from Idea"}
                  </div>
                </Reveal>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__lk8Dc)}
                  delay={1000}
                  duration={2000}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gsWc
                    )}
                  >
                    {"to Interface"}
                  </div>
                </Reveal>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vl8Du)}>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__l9Dfa)}
                  delay={2000}
                  duration={2000}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__unY6U
                    )}
                  >
                    {"Let's Build Something"}
                  </div>
                </Reveal>
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__ruQoi)}
                  delay={3000}
                  duration={2000}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i0JGb
                    )}
                  >
                    {"Together"}
                  </div>
                </Reveal>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___0MV0J)}>
              <LottieWrapper
                data-plasmic-name={"lottie"}
                data-plasmic-override={overrides.lottie}
                animationData={{
                  nm: "Main Scene",
                  ddd: 0,
                  h: 500,
                  w: 500,
                  meta: { g: "@lottiefiles/creator 1.18.0" },
                  layers: [
                    {
                      ty: 0,
                      nm: " logo",
                      sr: 1,
                      st: 0,
                      op: 67,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [940.7407407407408, 548.1481481481482] },
                        s: { a: 0, k: [50, 50] },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [250, 250] },
                        r: { a: 0, k: 0 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100 }
                      },
                      ef: [],
                      w: 1920,
                      h: 1080,
                      refId:
                        "precomp_logo_82188c1c-03dc-43ea-8dd8-c6c91c16fd7d",
                      ind: 1
                    }
                  ],
                  v: "5.7.0",
                  fr: 20,
                  op: 67,
                  ip: 0,
                  assets: [
                    {
                      nm: "logo",
                      id: "precomp_logo_82188c1c-03dc-43ea-8dd8-c6c91c16fd7d",
                      fr: 28,
                      layers: [
                        {
                          ty: 4,
                          nm: "Shape Layer 1",
                          sr: 1,
                          st: 18,
                          op: 3618,
                          ip: 18,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [95.00000000000011, 87], ix: 1 },
                            s: { a: 0, k: [-100, 100, 100], ix: 6 },
                            sk: { a: 0, k: 0 },
                            p: { a: 0, k: [925, 558.9999999999999], ix: 2 },
                            r: { a: 0, k: 90, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: { a: 0, k: 100, ix: 11 }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [826, 826], ix: 2 }
                                },
                                {
                                  ty: "st",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Stroke",
                                  nm: "Stroke 1",
                                  lc: 1,
                                  lj: 1,
                                  ml: 4,
                                  o: { a: 0, k: 100, ix: 4 },
                                  w: { a: 0, k: 35, ix: 5 },
                                  c: { a: 0, k: [1, 1, 1], ix: 3 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: true,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: { a: 0, k: [1, 0, 0], ix: 4 },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [95, 87], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            },
                            {
                              ty: "tm",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Filter - Trim",
                              nm: "Trim Paths 1",
                              ix: 2,
                              e: {
                                a: 1,
                                k: [
                                  {
                                    o: { x: 0.167, y: 0.167 },
                                    i: { x: 0.667, y: 1 },
                                    s: [0],
                                    t: 18
                                  },
                                  {
                                    o: { x: 0.167, y: 0 },
                                    i: { x: 0.667, y: 1 },
                                    s: [100],
                                    t: 62
                                  },
                                  {
                                    o: { x: 0.333, y: 0 },
                                    i: { x: 0.833, y: 0.833 },
                                    s: [100],
                                    t: 71
                                  },
                                  { s: [0], t: 115 }
                                ],
                                ix: 2
                              },
                              o: { a: 0, k: 0, ix: 3 },
                              s: { a: 0, k: 0, ix: 1 },
                              m: 1
                            }
                          ],
                          ind: 1
                        }
                      ]
                    }
                  ]
                }}
                className={classNames("__wab_instance", sty.lottie)}
                loop={false}
                preview={true}
              />

              <Reveal
                className={classNames("__wab_instance", sty.reveal__pK4K)}
                delay={3000}
                duration={2000}
                triggerOnce={true}
              >
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Your Embedded Particle Animation</title>\n  <style>\n    /* ---- reset ---- */\n    body {\n      margin: 0;\n      font: normal 75% Arial, Helvetica, sans-serif;\n    }\n\n    canvas {\n      display: block;\n      vertical-align: bottom;\n    }\n\n    /* ---- particles.js container ---- */\n    #particles-js {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background-color: #000;\n      background-image: url("");\n      background-repeat: no-repeat;\n      background-size: cover;\n      background-position: 50% 50%;\n    }\n\n    /* ---- stats.js ---- */\n    .count-particles {\n      background: #000;\n      position: absolute;\n      top: 48px;\n      left: 0;\n      width: 80px;\n      color: #56B9FF80;\n      font-size: .8em;\n      text-align: left;\n      text-indent: 4px;\n      line-height: 14px;\n      padding-bottom: 2px;\n      font-family: Helvetica, Arial, sans-serif;\n      font-weight: bold;\n    }\n\n    .js-count-particles {\n      font-size: 1.1em;\n    }\n\n    #stats,\n    .count-particles {\n      -webkit-user-select: none;\n    }\n\n    #stats {\n      border-radius: 3px 3px 0 0;\n      overflow: hidden;\n    }\n\n    .count-particles {\n      border-radius: 0 0 3px 3px;\n    }\n  </style>\n</head>\n<body>\n\n  <!-- particles.js container -->\n  <div id="particles-js"></div>\n\n  <!-- stats - count particles -->\n  <div class="count-particles">\n    <span class="js-count-particles"></span>\n  </div>\n\n  <!-- scripts -->\n  <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>\n  <script>\n    // ---- particles.js config ----\n    particlesJS("particles-js", {\n  "particles": {\n    "number": {\n      "value": 19,\n      "density": {\n        "enable": true,\n        "value_area": 800\n      }\n    },\n    "color": {\n      "value": "#ffffff"\n    },\n    "shape": {\n      "type": "circle",\n      "stroke": {\n        "width": 0,\n        "color": "#000000"\n      },\n      "polygon": {\n        "nb_sides": 5\n      },\n      "image": {\n        "src": "img/github.svg",\n        "width": 100,\n        "height": 100\n      }\n    },\n    "opacity": {\n      "value": 0.5,\n      "random": false,\n      "anim": {\n        "enable": false,\n        "speed": 1,\n        "opacity_min": 0.1,\n        "sync": false\n      }\n    },\n    "size": {\n      "value": 6,\n      "random": true,\n      "anim": {\n        "enable": false,\n        "speed": 40,\n        "size_min": 0.1,\n        "sync": false\n      }\n    },\n    "line_linked": {\n      "enable": false,\n      "distance": 150,\n      "color": "#ffffff",\n      "opacity": 0.4,\n      "width": 1\n    },\n    "move": {\n      "enable": true,\n      "speed": 4.5,\n      "direction": "none",\n      "random": true,\n      "straight": false,\n      "out_mode": "out",\n      "bounce": false,\n      "attract": {\n        "enable": false,\n        "rotateX": 0,\n        "rotateY": 1200\n      }\n    }\n  },\n  "interactivity": {\n    "detect_on": "window",\n    "events": {\n      "onhover": {\n        "enable": true,\n        "mode": "repulse"\n      },\n      "onclick": {\n        "enable": true,\n        "mode": "push"\n      },\n      "resize": true\n    },\n    "modes": {\n      "grab": {\n        "distance": 400,\n        "line_linked": {\n          "opacity": 1\n        }\n      },\n      "bubble": {\n        "distance": 400,\n        "size": 40,\n        "duration": 2,\n        "opacity": 8,\n        "speed": 3\n      },\n      "repulse": {\n        "distance": 200,\n        "duration": 0.4\n      },\n      "push": {\n        "particles_nb": 4\n      },\n      "remove": {\n        "particles_nb": 2\n      }\n    }\n  },\n  "retina_detect": true\n});\n\n    // ---- stats.js config ----\n    var count_particles, stats, update;\n    stats = new Stats;\n    stats.setMode(0);\n    stats.domElement.style.position = \'absolute\';\n    stats.domElement.style.left = \'0px\';\n    stats.domElement.style.top = \'0px\';\n    document.body.appendChild(stats.domElement);\n    count_particles = document.querySelector(\'.js-count-particles\');\n    update = function() {\n      stats.begin();\n      stats.end();\n      if (window.pJSDom[0].pJS.particles && window.pJSDom[0].pJS.particles.array) {\n        count_particles.innerText = window.pJSDom[0].pJS.particles.array.length;\n      }\n      requestAnimationFrame(update);\n    };\n    requestAnimationFrame(update);\n  </script>\n</body>\n</html>\n'
                  }
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__zJe08)}
                />
              </Reveal>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ir8EG)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___84PSt)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___2JJcg)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___0CXfE)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/noahmcgraw_dev/images/file3Png.png",
                    fullWidth: 2590,
                    fullHeight: 2305,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___14JFj)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x3GyH)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__grBhf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gcdBn
                      )}
                    >
                      {"Meet Noah"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gtcLf
                      )}
                    >
                      {"Independent Contractor & Self Founder"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fgLnD
                    )}
                  >
                    {
                      "He is a full-stack software developer, hailing from Central Illinois; delivering head-turning full-stack solutions and mobile apps alike. His passion for problem-solving has since led him down a path of furthering his knowledge and abilities. Today, in his late 20's,  he has a career he loves as an engineer, problem solver, and success planner. Adaptability, continuous learning, and a dedication to his craft are his keys to staying ahead in this ever-evolving field."
                    }
                  </div>
                </Stack__>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xAh9W)}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__bC42V)}
                triggerOnce={true}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hVggz)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__sbEby)}
                    effect={"fade"}
                    triggerOnce={true}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wsp4V)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9DyzF
                        )}
                      >
                        {
                          '" Noah has proven to be an exceptional developer and project manager. His reliability and skill set are unmatched, making him a go-to person for tackling some of my most challenging problems. "'
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pQmnl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lqEit
                          )}
                        >
                          {"Jon Cagle - Co-Founder at UniSyn Technologies"}
                        </div>
                      </div>
                    </Stack__>
                  </Reveal>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal___8WJw)}
                    delay={250}
                    triggerOnce={true}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gc5Hu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qeTnw
                        )}
                      >
                        {
                          '" The best freelancer that I have worked with so far. He has gone above and beyond the brief, and is extremely knowledgeable and approachable. I am 100% planning to use him again in the very near future. "'
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r7CVa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6MXqK
                          )}
                        >
                          {"Asher Levin - Instructor with ChatGPT Integrations"}
                        </div>
                      </div>
                    </Stack__>
                  </Reveal>
                </Stack__>
              </Reveal>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2DUq)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__lv6BZ)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mRf4F)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___0TDuf
                      )}
                      delay={500}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__os3NZ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lnNYd
                          )}
                        >
                          {"5/5"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qr61E
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kObQr
                            )}
                          >
                            {"Avg Rating On"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yf7Ut
                            )}
                          >
                            {"Upwork"}
                          </div>
                        </div>
                      </div>
                    </Reveal>
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__liGMd
                      )}
                      delay={750}
                      triggerOnce={true}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___5Wl0O)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"185px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/noahmcgraw_dev/images/upworkSvgrepoCom1Svg.svg",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: 1
                        }}
                      />
                    </Reveal>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__i3Ctf)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__v6Aq8)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___5E0U7
                      )}
                      delay={1000}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wjgcP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9ZDGp
                          )}
                        >
                          {"6+"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__duMnp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eT9Nr
                            )}
                          >
                            {"Years of"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mmcFu
                            )}
                          >
                            {"Experience"}
                          </div>
                        </div>
                      </div>
                    </Reveal>
                    <Reveal
                      className={classNames("__wab_instance", sty.reveal__iEaY)}
                      delay={1250}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uURmg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lza2H
                          )}
                        >
                          {"97%"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oMnOn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uqqEn
                            )}
                          >
                            {"On-Time"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tpo0K
                            )}
                          >
                            {"Delivery"}
                          </div>
                        </div>
                      </div>
                    </Reveal>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__w6PSj)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"185px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/noahmcgraw_dev/images/upworkSvgrepoCom1Svg.svg",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: 1
                      }}
                    />
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__qp9Q5)}
            direction={"up"}
            effect={"fade"}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__by7Ya)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hS0Gj)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___8BgLt)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal___9Pai)}
                    duration={500}
                    effect={"slide"}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q4BkG
                      )}
                    >
                      {"A Proven Expert In"}
                    </div>
                  </Reveal>
                </div>
                <CmsQueryRepeater
                  data-plasmic-name={"cmsDataFetcher"}
                  data-plasmic-override={overrides.cmsDataFetcher}
                  className={classNames("__wab_instance", sty.cmsDataFetcher)}
                  desc={false}
                  emptyMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j89Fy
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  forceEmptyState={false}
                  forceLoadingState={false}
                  limit={0}
                  loadingMessage={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__b9Pc1
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </DataCtxReader__>
                  }
                  noAutoRepeat={false}
                  noLayout={false}
                  orderBy={"order"}
                  table={"techCategory"}
                  useDraft={false}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__v4Ffa
                        )}
                        delay={(() => {
                          try {
                            return (
                              $ctx.plasmicCmsTechCategoryCollection.indexOf(
                                $ctx.plasmicCmsTechCategoryItem
                              ) * 250
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        direction={"up"}
                        effect={"fade"}
                        triggerOnce={true}
                      >
                        <TechCardMasterContainer
                          data-plasmic-name={"techCardMasterContainer"}
                          data-plasmic-override={
                            overrides.techCardMasterContainer
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.techCardMasterContainer
                          )}
                        />
                      </Reveal>
                    )}
                  </DataCtxReader__>
                </CmsQueryRepeater>
              </Stack__>
            </div>
          </Reveal>
          <div className={classNames(projectcss.all, sty.freeBox__goTni)}>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__rCCyu)}
              direction={"up"}
              effect={"fade"}
              triggerOnce={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox__rwRa5)}>
                <div className={classNames(projectcss.all, sty.freeBox___7Z2K)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__c3LbH)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dwYmi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Dxke
                        )}
                      >
                        {"Trusted By"}
                      </div>
                    </div>
                    {(() => {
                      const child$Props = {
                        arrows: false,
                        autoplay: true,
                        autoplaySpeed: 0,
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["trustedByMarque", "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        centerMode: true,
                        centerPadding: "24px",
                        className: classNames(
                          "__wab_instance",
                          sty.trustedByMarque
                        ),
                        cssEase: "linear",
                        initialSlide: generateStateValueProp($state, [
                          "trustedByMarque",
                          "currentSlide"
                        ]),
                        pauseOnHover: false,
                        ref: ref => {
                          $refs["trustedByMarque"] = ref;
                        },
                        rows: 1,
                        sliderScopeClassName: sty["trustedByMarque__slider"],
                        slidesToShow: 3,
                        speed: 5000,
                        swipe: false,
                        touchMove: false,
                        variableWidth: false
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "trustedByMarque.currentSlide"
                          }
                        ],
                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <SliderWrapper
                          data-plasmic-name={"trustedByMarque"}
                          data-plasmic-override={overrides.trustedByMarque}
                          {...child$Props}
                        >
                          <CmsQueryRepeater
                            data-plasmic-name={"hypernovaUsa"}
                            data-plasmic-override={overrides.hypernovaUsa}
                            className={classNames(
                              "__wab_instance",
                              sty.hypernovaUsa
                            )}
                            desc={false}
                            emptyMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lCDmp
                                    )}
                                  >
                                    {"No matching published entries found."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            filterField={"title"}
                            filterValue={"Hypernova USA"}
                            forceEmptyState={false}
                            forceLoadingState={false}
                            limit={1}
                            loadingMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jSs0K
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            mode={"rows"}
                            noAutoRepeat={false}
                            noLayout={true}
                            useDraft={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <ProjectCard
                                  className={classNames(
                                    "__wab_instance",
                                    sty.projectCard__w5LW1
                                  )}
                                />
                              )}
                            </DataCtxReader__>
                          </CmsQueryRepeater>
                          <CmsQueryRepeater
                            data-plasmic-name={"unisynTechnologies"}
                            data-plasmic-override={overrides.unisynTechnologies}
                            className={classNames(
                              "__wab_instance",
                              sty.unisynTechnologies
                            )}
                            desc={false}
                            emptyMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ebmtX
                                    )}
                                  >
                                    {"No matching published entries found."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            filterField={"title"}
                            filterValue={"UniSyn Technologies"}
                            forceEmptyState={false}
                            forceLoadingState={false}
                            limit={1}
                            loadingMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__aFwbN
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            mode={"rows"}
                            noAutoRepeat={false}
                            noLayout={true}
                            useDraft={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <ProjectCard
                                  className={classNames(
                                    "__wab_instance",
                                    sty.projectCard__zylpz
                                  )}
                                />
                              )}
                            </DataCtxReader__>
                          </CmsQueryRepeater>
                          <CmsQueryRepeater
                            data-plasmic-name={"flowFeed"}
                            data-plasmic-override={overrides.flowFeed}
                            className={classNames(
                              "__wab_instance",
                              sty.flowFeed
                            )}
                            desc={false}
                            emptyMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4UQu
                                    )}
                                  >
                                    {"No matching published entries found."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            filterField={"title"}
                            filterValue={"FlowFeed"}
                            forceEmptyState={false}
                            forceLoadingState={false}
                            limit={1}
                            loadingMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3BJ8J
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            mode={"rows"}
                            noAutoRepeat={false}
                            noLayout={true}
                            useDraft={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <ProjectCard
                                  className={classNames(
                                    "__wab_instance",
                                    sty.projectCard__noCO
                                  )}
                                />
                              )}
                            </DataCtxReader__>
                          </CmsQueryRepeater>
                          <CmsQueryRepeater
                            data-plasmic-name={"scrubstr"}
                            data-plasmic-override={overrides.scrubstr}
                            className={classNames(
                              "__wab_instance",
                              sty.scrubstr
                            )}
                            desc={false}
                            emptyMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4DGf
                                    )}
                                  >
                                    {"No matching published entries found."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            filterField={"title"}
                            filterValue={"Scrubstr"}
                            forceEmptyState={false}
                            forceLoadingState={false}
                            limit={1}
                            loadingMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rQdUj
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            mode={"rows"}
                            noAutoRepeat={false}
                            noLayout={true}
                            useDraft={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <ProjectCard
                                  className={classNames(
                                    "__wab_instance",
                                    sty.projectCard__bxOry
                                  )}
                                />
                              )}
                            </DataCtxReader__>
                          </CmsQueryRepeater>
                          <CmsQueryRepeater
                            data-plasmic-name={"autoLingo"}
                            data-plasmic-override={overrides.autoLingo}
                            className={classNames(
                              "__wab_instance",
                              sty.autoLingo
                            )}
                            desc={false}
                            emptyMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wnTSe
                                    )}
                                  >
                                    {"No matching published entries found."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            filterField={"title"}
                            filterValue={"AutoLingo"}
                            forceEmptyState={false}
                            forceLoadingState={false}
                            limit={1}
                            loadingMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cbuG
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            mode={"rows"}
                            noAutoRepeat={false}
                            noLayout={true}
                            useDraft={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <ProjectCard
                                  className={classNames(
                                    "__wab_instance",
                                    sty.projectCard__lyzKw
                                  )}
                                />
                              )}
                            </DataCtxReader__>
                          </CmsQueryRepeater>
                          <CmsQueryRepeater
                            data-plasmic-name={"skillShotGolf"}
                            data-plasmic-override={overrides.skillShotGolf}
                            className={classNames(
                              "__wab_instance",
                              sty.skillShotGolf
                            )}
                            desc={false}
                            emptyMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__r8Iqq
                                    )}
                                  >
                                    {"No matching published entries found."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            filterField={"title"}
                            filterValue={"Skill Shot Golf"}
                            forceEmptyState={false}
                            forceLoadingState={false}
                            limit={1}
                            loadingMessage={
                              <DataCtxReader__>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iruwO
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </DataCtxReader__>
                            }
                            mode={"rows"}
                            noAutoRepeat={false}
                            noLayout={true}
                            useDraft={false}
                          >
                            <DataCtxReader__>
                              {$ctx => (
                                <ProjectCard
                                  className={classNames(
                                    "__wab_instance",
                                    sty.projectCard__h4PH4
                                  )}
                                />
                              )}
                            </DataCtxReader__>
                          </CmsQueryRepeater>
                        </SliderWrapper>
                      );
                    })()}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sogNl)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jEsDn)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___5Xbvz
                      )}
                      delay={1000}
                      direction={"up"}
                      duration={1000}
                      effect={"fade"}
                      triggerOnce={true}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__p4Yh)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/noahmcgraw_dev/images/fullStackDeveloper1Png.png",
                          fullWidth: 1545,
                          fullHeight: 2000,
                          aspectRatio: undefined
                        }}
                      />
                    </Reveal>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__klJA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yyHAx
                        )}
                        id={"get-started"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xbxE5
                          )}
                        >
                          {"Ready to"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lEbWm
                          )}
                        >
                          {"Build Something?"}
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3Chn2
                        )}
                      >
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__yvVzf
                          )}
                          component={Link}
                          href={
                            "mailto:noah@noahmcgraw.dev?subject=I%20want%20to%20start%20a%20project%21&body=Hi%20Noah%2C%0A%0AI%27m%20interested%20in%20starting%20a%20project%20with%20you%21\n"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__dgwuE
                            )}
                            color={"orange"}
                            shape={"rounded"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__duFqi
                              )}
                            >
                              {"Get Started"}
                            </div>
                          </Button>
                        </PlasmicLink__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bxAdf
                          )}
                        >
                          {"or"}
                        </div>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__rcRky
                          )}
                          component={Link}
                          href={
                            "https://ngmstudio-wp-assets.s3.us-east-2.amazonaws.com/noahmcgraw/2024/07/17231832/Full-Stack+Developer+(1).pdf"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__yhezA
                            )}
                            shape={"rounded"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vUbEm
                              )}
                            >
                              {"Take my resume"}
                            </div>
                          </Button>
                        </PlasmicLink__>
                      </Stack__>
                    </div>
                  </Stack__>
                </div>
              </div>
            </Reveal>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "navDropdown",
    "lottie",
    "embedHtml",
    "cmsDataFetcher",
    "techCardMasterContainer",
    "trustedByMarque",
    "hypernovaUsa",
    "unisynTechnologies",
    "flowFeed",
    "scrubstr",
    "autoLingo",
    "skillShotGolf"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  navDropdown: ["navDropdown"],
  lottie: ["lottie"],
  embedHtml: ["embedHtml"],
  cmsDataFetcher: ["cmsDataFetcher", "techCardMasterContainer"],
  techCardMasterContainer: ["techCardMasterContainer"],
  trustedByMarque: [
    "trustedByMarque",
    "hypernovaUsa",
    "unisynTechnologies",
    "flowFeed",
    "scrubstr",
    "autoLingo",
    "skillShotGolf"
  ],
  hypernovaUsa: ["hypernovaUsa"],
  unisynTechnologies: ["unisynTechnologies"],
  flowFeed: ["flowFeed"],
  scrubstr: ["scrubstr"],
  autoLingo: ["autoLingo"],
  skillShotGolf: ["skillShotGolf"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageMetadataOverride: typeof PlasmicHead;
  navDropdown: typeof NavDropdown;
  lottie: typeof LottieWrapper;
  embedHtml: typeof Embed;
  cmsDataFetcher: typeof CmsQueryRepeater;
  techCardMasterContainer: typeof TechCardMasterContainer;
  trustedByMarque: typeof SliderWrapper;
  hypernovaUsa: typeof CmsQueryRepeater;
  unisynTechnologies: typeof CmsQueryRepeater;
  flowFeed: typeof CmsQueryRepeater;
  scrubstr: typeof CmsQueryRepeater;
  autoLingo: typeof CmsQueryRepeater;
  skillShotGolf: typeof CmsQueryRepeater;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    navDropdown: makeNodeComponent("navDropdown"),
    lottie: makeNodeComponent("lottie"),
    embedHtml: makeNodeComponent("embedHtml"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    techCardMasterContainer: makeNodeComponent("techCardMasterContainer"),
    trustedByMarque: makeNodeComponent("trustedByMarque"),
    hypernovaUsa: makeNodeComponent("hypernovaUsa"),
    unisynTechnologies: makeNodeComponent("unisynTechnologies"),
    flowFeed: makeNodeComponent("flowFeed"),
    scrubstr: makeNodeComponent("scrubstr"),
    autoLingo: makeNodeComponent("autoLingo"),
    skillShotGolf: makeNodeComponent("skillShotGolf"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Noah McGraw - Full Stack Software Engineer",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
