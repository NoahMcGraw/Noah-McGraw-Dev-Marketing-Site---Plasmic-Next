// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jGvug5XrUvXJigea3T3bFe

import * as React from "react";
import { hasVariant, ensureGlobalVariants } from "@plasmicapp/react-web";
import { CmsCredentialsProvider } from "@plasmicpkgs/plasmic-cms";
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";
import { EmbedCss } from "@plasmicpkgs/plasmic-embed-css";

export interface GlobalContextsProviderProps {
  children?: React.ReactElement;
  cmsCredentialsProviderProps?: Partial<
    Omit<React.ComponentProps<typeof CmsCredentialsProvider>, "children">
  >;

  antdConfigProviderProps?: Partial<
    Omit<React.ComponentProps<typeof AntdConfigProvider>, "children">
  >;

  embedCssProps?: Partial<
    Omit<React.ComponentProps<typeof EmbedCss>, "children">
  >;
}

export default function GlobalContextsProvider(
  props: GlobalContextsProviderProps
) {
  const {
    children,
    cmsCredentialsProviderProps,
    antdConfigProviderProps,
    embedCssProps
  } = props;

  return (
    <CmsCredentialsProvider
      {...cmsCredentialsProviderProps}
      databaseId={
        cmsCredentialsProviderProps &&
        "databaseId" in cmsCredentialsProviderProps
          ? cmsCredentialsProviderProps.databaseId!
          : "pacym35BY4HC9NvbbAyK6G"
      }
      databaseToken={
        cmsCredentialsProviderProps &&
        "databaseToken" in cmsCredentialsProviderProps
          ? cmsCredentialsProviderProps.databaseToken!
          : "xPzJ7KdUEd6dF2KWUX6OYLtMl7S7rSS0O1Q1xWZGEYLwc7iu1wr8Qa9izYEILoUiLdwcJhga0U5afWA5g"
      }
      host={
        cmsCredentialsProviderProps && "host" in cmsCredentialsProviderProps
          ? cmsCredentialsProviderProps.host!
          : "https://data.plasmic.app"
      }
      locale={
        cmsCredentialsProviderProps && "locale" in cmsCredentialsProviderProps
          ? cmsCredentialsProviderProps.locale!
          : undefined
      }
    >
      <AntdConfigProvider
        {...antdConfigProviderProps}
        borderRadius={
          antdConfigProviderProps && "borderRadius" in antdConfigProviderProps
            ? antdConfigProviderProps.borderRadius!
            : 6
        }
        colorBgBase={
          antdConfigProviderProps && "colorBgBase" in antdConfigProviderProps
            ? antdConfigProviderProps.colorBgBase!
            : "#ffffff"
        }
        colorError={
          antdConfigProviderProps && "colorError" in antdConfigProviderProps
            ? antdConfigProviderProps.colorError!
            : "#ff4d4f"
        }
        colorInfo={
          antdConfigProviderProps && "colorInfo" in antdConfigProviderProps
            ? antdConfigProviderProps.colorInfo!
            : "#1677ff"
        }
        colorPrimary={
          antdConfigProviderProps && "colorPrimary" in antdConfigProviderProps
            ? antdConfigProviderProps.colorPrimary!
            : "#1677ff"
        }
        colorSuccess={
          antdConfigProviderProps && "colorSuccess" in antdConfigProviderProps
            ? antdConfigProviderProps.colorSuccess!
            : "#52c41a"
        }
        colorWarning={
          antdConfigProviderProps && "colorWarning" in antdConfigProviderProps
            ? antdConfigProviderProps.colorWarning!
            : "#faad14"
        }
        controlHeight={
          antdConfigProviderProps && "controlHeight" in antdConfigProviderProps
            ? antdConfigProviderProps.controlHeight!
            : 32
        }
        defaultDark={
          antdConfigProviderProps && "defaultDark" in antdConfigProviderProps
            ? antdConfigProviderProps.defaultDark!
            : false
        }
        lineWidth={
          antdConfigProviderProps && "lineWidth" in antdConfigProviderProps
            ? antdConfigProviderProps.lineWidth!
            : 1
        }
        loadingText={
          antdConfigProviderProps && "loadingText" in antdConfigProviderProps
            ? antdConfigProviderProps.loadingText!
            : undefined
        }
        removeLoading={
          antdConfigProviderProps && "removeLoading" in antdConfigProviderProps
            ? antdConfigProviderProps.removeLoading!
            : undefined
        }
        sizeStep={
          antdConfigProviderProps && "sizeStep" in antdConfigProviderProps
            ? antdConfigProviderProps.sizeStep!
            : 4
        }
        sizeUnit={
          antdConfigProviderProps && "sizeUnit" in antdConfigProviderProps
            ? antdConfigProviderProps.sizeUnit!
            : 4
        }
        themeStyles={
          antdConfigProviderProps && "themeStyles" in antdConfigProviderProps
            ? antdConfigProviderProps.themeStyles!
            : true
            ? {
                fontFamily: "Roboto",
                fontSize: "18px",
                fontWeight: "400",
                lineHeight: "1.5",
                color: "#E8E8E1",
                letterSpacing: "normal"
              }
            : undefined
        }
        wireframe={
          antdConfigProviderProps && "wireframe" in antdConfigProviderProps
            ? antdConfigProviderProps.wireframe!
            : false
        }
      >
        <EmbedCss
          {...embedCssProps}
          css={
            embedCssProps && "css" in embedCssProps
              ? embedCssProps.css!
              : "/* CSS snippet */\n\ndiv.plasmic_page_wrapper + div {\n    display: none !important;\n}\n\n.black-stroke {\n    -webkit-text-stroke: 1.5px rgba(0, 0, 0, 0.547);\n}\n\n.transition-max-height {\n    transition: max-height 1s ease-in-out;\n    overflow: hidden;\n}\n\n.transition-max-width {\n    transition: max-width 1s ease-in-out;\n    overflow: hidden;\n}\n\n.counter-clockwise-border-anim {\n    animation: animate-border 4s linear infinite;\n}\n\n  @keyframes animate-border {\n    0% {\n      background-position: 0 0;\n    }\n    100% {\n      background-position: 400% 0;\n    }\n  }\n\n.circle__box {\n  width: 200px;\n  height: 200px;\n  margin: 50px auto;\n  position: relative;\n}\n\n.circle__wrapper {\n  width: 100px;\n  height: 200px;\n  position: absolute;\n  top: 0;\n  overflow: hidden;\n}\n\n.circle__wrapper--right {\n  right: 0;\n}\n\n.circle__wrapper--left {\n  left: 0;\n}\n\n.circle__whole {\n  width: 160px;\n  height: 160px;\n  border: 20px solid transparent;\n  border-radius: 50%;\n  position: absolute;\n  top: 0;\n  transform: rotate(-135deg);\n}\n\n.circle__right {\n  border-top: 20px solid teal;\n  border-right: 20px solid teal;\n  right: 1px;\n  animation: circleRight 5s linear forwards;\n}\n\n.circle__left {\n  border-bottom: 20px solid teal;\n  border-left: 20px solid teal;\n  left: 1px;\n  animation: circleLeft 5s linear forwards;\n}\n\n@keyframes circleRight {\n  0% {\n    transform: rotate(-135deg);\n  }\n  50%,\n  100% {\n    transform: rotate(45deg);\n  }\n}\n\n@keyframes circleLeft {\n  0%,\n  50% {\n    transform: rotate(-135deg);\n  }\n  100% {\n    -webkit-transform: rotate(45deg);\n  }\n}"
          }
        >
          {children}
        </EmbedCss>
      </AntdConfigProvider>
    </CmsCredentialsProvider>
  );
}
